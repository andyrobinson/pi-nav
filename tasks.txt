CURRENTLY WORKING ON:

NEXT:
Complete simple sailing algorithm:
    - Finish off the conversion to the event driven system
    - Remove calculation of second leg time (no longer needed, handled by the navigation review)
    - Consider how to handle a review which happens part way through the tack.... how do we clear out an impending tack?

    - bear up to wind as much as possible if tacking
    - avoid the no-go area continuously by bearing off in the direction of the tack as needed
    - set sails according to the wind direction

Update simulation
    - Add a wind direction
    - Look at how the tacking goes...

Steering field test
- Move JSON file to somewhere that is easily edited
- set a course around Chorlton Park
- practice changing config settings

Time
Sort out GPS vs system time - ideally system should take it's time from gps - what happens if not there???

Epic - simulation
- Add a bit of randomness to simulation
- Add wind and tides to simulation

Epic - power-on self test
- Trap and log errors during self test, to prevent failure at this point
- Wait for GPS to have signal - probably at least 5 mins
- Note that failure in self-check does NOT stop navigation from beginning - need try ... catch around everything

Epic - sailing
Current tasks
- Add avoiding no go - when changing course and while steering (bearing off)
- Add becalmed and in irons
- write an integration test for the sailing helm
- consider if we need to break out a bearing class to encapsulate the 360 behaviour of bearings (of course we do)
- decide what to do about changes or differences in wind direction during tack
- create class to control sail angle based on relative wind, use in the sailing helm
- plumb sailing helm into wiring
- move constants into config for sailing_helm and navigator
- field test

For later
- dealing with tides/currents/drift; probably need a compass (may need compass for rate of turn anyway)
- falling back when sensors fail (for instance tracking to compass and vice-versa)
- navigate to nearest next waypoint on reboot, NOT first in list
- software autoreboot
- hardware autoreboot (n.b. problems with self-check)

=====================================================================================
________
| Done |
--------
2. Implement a simple sailing algorithm:
    - look on the Internet for examples, formula for calculating sail angle
    - only tack to (max) half-way, then reassess
    - simple steer if not in the no-go area
    - decide once at beginning of navigation which way to tack even if a tack is not
    required (always choose more direct tack)

- Steering around a course Investigation:
  - Instantaneous rate of turn is very high, sometimes as much as 250 degrees/sec.  Note that because we are
  sampling every 0.2s rate of turn is magnified - could be as much as 720 degrees/sec in theory
  - Compass varies between readings by up to 10 degrees
  - Adding a low pass filter for the compass will reduce both variation and rate of turn
  - Need to reduce influence of rate of turn on rudder deflection (configurable)
  - Need to reduce influence of deviation from course, probably by 50%
  - Should probably try each one in turn, starting with a low pass filter on the compass

Epic -  Simplify the general steering code:
    - introduce a low pass filter for the compass
    - cap rate of turn at 180 degrees
    - change configuration to reduce influence of rate of turn and deviation
    - decided not to remove specific turn code - looks OK. Need further field testing

Epic - field test
- Field test tracking including compass and windsensor
- field test steering without sailing

Epic - field test and tune steering so that it works in practice
- Moved steer to it's own event
- Added low pass filter for compass based on tick event, now 0.1s

Epic - steering using servo based on new event design
- Add logging to a different file to sensors
- Add avg heading and abs wind direction

To run as a service under systemd:

http://www.raspberrypi-spy.co.uk/2015/10/how-to-autorun-a-python-script-on-boot-using-systemd/
____

- GPS did not work on last track test, probably pi config messed up - need to check all the
settings and make sure that PI can talk to GPS.  See:
https://www.raspberrypi.org/forums/viewtopic.php?f=45&t=53644
- This worked: Enable daemon, specify device in the OPTIONS setting not in devices,set USBAUTO to False

_______

Epic - power on self-test
- Simple rudder deflection and check value from wind sensor
